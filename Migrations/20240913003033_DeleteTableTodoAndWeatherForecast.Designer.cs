// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dot_dotnet_test_api.Contexts;

#nullable disable

namespace dot_dotnet_test_api.Migrations
{
    [DbContext(typeof(SQLServerContext))]
    [Migration("20240913003033_DeleteTableTodoAndWeatherForecast")]
    partial class DeleteTableTodoAndWeatherForecast
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dot_dotnet_test_api.Models.MovieScheduleV1", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("end_time");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int?>("RemainingSeat")
                        .HasColumnType("int")
                        .HasColumnName("remaining_Seat");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long?>("movie_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("studio_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("movie_id");

                    b.HasIndex("studio_id");

                    b.ToTable("Movie_Schedules");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.MovieTagsV1", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long?>("movie_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("tag_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("movie_id");

                    b.HasIndex("tag_id");

                    b.ToTable("Movie_Tags");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.MovieV1", b =>
                {
                    b.Property<long?>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("overview");

                    b.Property<DateTime>("PlayUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("play_until");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("poster");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 9981L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5380),
                            Overview = "When Tony Stark tries to jumpstart a dormant peacekeeping program, things go awry and Earth’s Mightiest Heroes are put to the ultimate test as the fate of the planet hangs in the balance. As the villainous Ultron emerges, it is up to The Avengers to stop him from enacting his terrible plans, and soon uneasy alliances and unexpected action pave the way for an epic and unique global adventure.",
                            PlayUntil = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5380),
                            Poster = "https://image.tmdb.org/t/p/original/4ssDuvEDkSArWEdyBl2X5EHvYKU.jpg",
                            Title = "Avengers: Age of Ultron",
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5380)
                        });
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.OrderItemsV1", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int?>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty");

                    b.Property<int?>("SubTotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("sub_total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long?>("movie_schedule_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("order_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("movie_schedule_id");

                    b.HasIndex("order_id");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.OrderV1", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("TotalItemPrice")
                        .HasColumnType("int")
                        .HasColumnName("total_item_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long?>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.StudioV1", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int")
                        .HasColumnName("seat_capacity");

                    b.Property<int>("StudioNumber")
                        .HasColumnType("int")
                        .HasColumnName("studio_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Studios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5440),
                            SeatCapacity = 50,
                            StudioNumber = 1,
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5440)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5440),
                            SeatCapacity = 50,
                            StudioNumber = 2,
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5440)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5450),
                            SeatCapacity = 50,
                            StudioNumber = 3,
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5450)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5450),
                            SeatCapacity = 50,
                            StudioNumber = 4,
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5450)
                        });
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.TagV1", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5110),
                            Name = "Action",
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5160)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5360),
                            Name = "Comedy",
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5360)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5370),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 298, DateTimeKind.Local).AddTicks(5370)
                        });
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("Is_admin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Avatar = "./files/images/avatar/example.png",
                            CreatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 287, DateTimeKind.Local).AddTicks(7910),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@getnada.com",
                            Is_admin = false,
                            Name = "user test",
                            Password = "PKB1bwG/qzuelJgogmEjDDH8Rnw9tfvbA/rIobM+EyjDKDLmSXS1BZGCV+bo6hpV",
                            UpdatedAt = new DateTime(2024, 9, 13, 7, 30, 32, 287, DateTimeKind.Local).AddTicks(7970)
                        });
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.MovieScheduleV1", b =>
                {
                    b.HasOne("dot_dotnet_test_api.Models.MovieV1", "Movie")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("movie_id");

                    b.HasOne("dot_dotnet_test_api.Models.StudioV1", "Studio")
                        .WithMany()
                        .HasForeignKey("studio_id");

                    b.Navigation("Movie");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.MovieTagsV1", b =>
                {
                    b.HasOne("dot_dotnet_test_api.Models.MovieV1", "Movie")
                        .WithMany("MovieTags")
                        .HasForeignKey("movie_id");

                    b.HasOne("dot_dotnet_test_api.Models.TagV1", "Tag")
                        .WithMany("MovieTag")
                        .HasForeignKey("tag_id");

                    b.Navigation("Movie");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.OrderItemsV1", b =>
                {
                    b.HasOne("dot_dotnet_test_api.Models.MovieScheduleV1", "MovieSchedule")
                        .WithMany()
                        .HasForeignKey("movie_schedule_id");

                    b.HasOne("dot_dotnet_test_api.Models.OrderV1", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("order_id");

                    b.Navigation("MovieSchedule");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.OrderV1", b =>
                {
                    b.HasOne("dot_dotnet_test_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.MovieV1", b =>
                {
                    b.Navigation("MovieSchedules");

                    b.Navigation("MovieTags");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.OrderV1", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("dot_dotnet_test_api.Models.TagV1", b =>
                {
                    b.Navigation("MovieTag");
                });
#pragma warning restore 612, 618
        }
    }
}
